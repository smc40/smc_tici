name: Test, Build and Deploy TICI

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.9
  REGISTRY: ghcr.io
  IMAGE_NAME: ticiapp


permissions:
  id-token: write
  contents: read
  packages: write


jobs:
  test-python:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r req_freeze.txt
          pip install ruff

      - name: Lint
        run: ruff check --output-format=github .


  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - name: Build and push image to ghcr
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.ouputs.labels }}

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDS }}       # uses Client secrets for on-prem tests
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            #      - name: Deploy to Azure Container App
            #        uses: azure/container-apps-deploy-action@v1
            #        with:
            #          appSourcePath: ${{ github.workspace }}
            #          registryUrl: ghcr.io
            #          registryUsername: ${{ github.actor }}
            #          registryPassword: ${{ secrets.GITHUB_TOKEN }}
            #          containerAppName: secrets.AZURE_CONTAINER_APP
            #          resourceGroup: secrets.AZURE_RESOURCE_GROUP
            #          imageToDeploy: ghcr.io/${{ github.repository }}:${{ github.sha }}




          #        uses: actions/checkout@v2
          #
          #      - name: Set up Docker Buildx
          #        uses: docker/setup-buildx-action@v2
          #
          #      - name: Set up Azure CLI
          #        uses: azure/setup-cli@v1
          #        with:
          #          cli-version: latest
          #
          #      - name: Azure login
          #        uses: azure/login@v1
          #        with:
          #          creds: ${{ secrets.AZURE_CLIENT_SECRET}}
          #
          #      - name: Set up Terraform
          #        uses: hashicorp/setup-terraform@v2
          #        with:
          #          terraform_version: 1.9.2
          #
          #      - name: Run Terraform
          #        working-directory: ./infrastructure
          #        env:
          #          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          #          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          #          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          #          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          #        run: |
          #          terraform init
          #          terraform apply -auto-approve -var-file=environment/dev.tfvars
          #
          #      - name: Get ACR Login Server
          #        id: acr_login_server
          #        working-directory: ./infrastructure
          #        run: echo "##[set-output name=server;]$(terraform output -raw container_registry_login_server)"
          #
          #      - name: Build and Push Image
          #        run: |
          #          IMAGE_NAME=${{ secrets.TICIAPP_IMAGE_NAME }}/ticiapp:latest
          #          docker build -t $IMAGE_NAME .
          #          docker push $IMAGE_NAME
